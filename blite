#!/usr/bin/env bash
##
# Blite is a CLI tool for using bosh-lite and Bosh2
# It is meant to fill in the gaps left by moving from a Vagrant solution and make it relatively painless for developers
# to get a functional Bosh director locally using VirtualBox.
#

VERSION=v0.1.0
CONFIG=${HOME}/.config/blite
MANIFESTS=${CONFIG}/manifests
STATE_FILES=${CONFIG}/state
CREDS_FILES=${CONFIG}/creds
BOSH_DEPLOYMENT_VERSION_FILE=${CONFIG}/bosh_deployment_version_hash.txt
BOSH_DEPLOYMENT_FILES=${CONFIG}/bosh-deployment-files

mkdir -p ${BOSH_DEPLOYMENT_FILES}

mkdir -p ${CONFIG}
mkdir -p ${MANIFESTS}
mkdir -p ${STATE_FILES}
mkdir -p ${CREDS_FILES}

# Variables the user can override
: "${BLITE_DIRECTOR_CIDR:=192.168.50.0/24}"
: "${BLITE_GATEWAY_IP:=192.168.50.1}"
: "${BLITE_DIRECTOR_IP:=192.168.50.6}"
: "${BLITE_BOSH_DEPLOYMENTS_CIDR:=10.244.0.0/16}"
: "${BOSH_DEPLOYMENT_VERSION_HASH:=$(cat ${BOSH_DEPLOYMENT_VERSION_FILE} 2>/dev/null)}"
: "${BLITE_BOSH_EXECUTABLE:=bosh}"
: "${BLITE_BOSH_ENVIRONMENT:=vbox}"

blite_id=$(echo "$HOSTNAME-$BLITE_DIRECTOR_CIDR-$BLITE_GATEWAY_IP-$BLITE_DIRECTOR_IP" | shasum | awk '{print $1}')

DEPLOYMENT_FILES=${BOSH_DEPLOYMENT_FILES}/${BOSH_DEPLOYMENT_VERSION_HASH}
blite_manifest=${MANIFESTS}/${blite_id}.yml
STATE_FILE=${STATE_FILES}/${blite_id}-state.json
CREDS_FILE=${CREDS_FILES}/${blite_id}-creds.yml

if [ ! $(command -v jq) ]; then
  echo -e "\njq not found! It must be installed before proceeding: https://stedolan.github.io/jq/\n"
  exit 1
fi

if [ ! $(command -v curl) ]; then
  echo -e "\ncurl not found! It must be installed before proceeding: https://curl.haxx.se/\n"
  exit 1
fi

if [ ! $(command -v VBoxManage) ]; then
  echo -e "\nVirtualBox and its CLI VBoxManage not found! They must be installed before proceeding: https://virtualbox.org/\n"
  exit 1
fi

if [ ! $(command -v ${BLITE_BOSH_EXECUTABLE}) ]; then
  echo -e "\nBosh2 CLI not found! It must be installed before proceeding: https://bosh.io/docs/cli-v2.html#install"
  exit 1
elif [ -z "$(${BLITE_BOSH_EXECUTABLE} -v | grep 'version 2.')" ]; then
  echo -e "\nBosh seems to be installed, but is not the correct version. Version 2 is required https://bosh.io/docs/cli-v2.html#install"
  exit 1
fi

print_director_ip () {
  echo "  BLITE_DIRECTOR_IP: $BLITE_DIRECTOR_IP"
}

print_blite_configuration () {
  print_director_ip
  echo "  BLITE_GATEWAY_IP: $BLITE_GATEWAY_IP"
  echo "  BLITE_DIRECTOR_CIDR: $BLITE_DIRECTOR_CIDR"
}

print_good_luck_error () {
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "Blite thought this director should exist, but it doesn't seem to be in VirtualBox."
  echo "Good luck with that."
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
}

print_no_director_error () {
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "There doesn't seem to be a bosh-lite director with this configuration:"
  print_blite_configuration
  echo "Try running blite create first."
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
}

print_director_env_config () {
  echo "   export BOSH_CREDS_FILE=$CREDS_FILE;"
  echo "   export BOSH_CA_CERT=\$($BLITE_BOSH_EXECUTABLE interpolate \$BOSH_CREDS_FILE --path /director_ssl/ca);"
  echo "   export BOSH_CLIENT=admin;"
  echo "   export BOSH_CLIENT_SECRET=\$($BLITE_BOSH_EXECUTABLE interpolate \$BOSH_CREDS_FILE --path /admin_password);"
  echo "   export BOSH_ENVIRONMENT=$BLITE_BOSH_ENVIRONMENT;"
}

print_env_info () {
  echo
  echo "Your Bosh Director is now active! You may want to set/update the following environment variables:"
  print_director_env_config
  echo "If you've already got these exported from a previous creation, don't forget to re-source as certs may have been updated!"
  echo "You can automatically setup your environment with the command:"
  echo "  eval \$(blite env-eval)"
  echo
  echo "You probably also want to create a route so you can access your deployments from the host."
  echo "Depending on your cloud config these values may not be right. This script determines the CIDR of the Bosh Deployments"
  echo "from the \$BLITE_BOSH_DEPLOYMENTS_CIDR environment variable. Which is currently set to $BLITE_BOSH_DEPLOYMENTS_CIDR"
  echo "The command to allow you to access VMS within that CIDR through the Bosh director is:"
  echo "   sudo route add -net $BLITE_BOSH_DEPLOYMENTS_CIDR gw  $BLITE_DIRECTOR_IP #LINUX w/ route command"
  echo "   sudo ip route add   $BLITE_BOSH_DEPLOYMENTS_CIDR via $BLITE_DIRECTOR_IP # Linux (using iproute2 suite)"
  echo "   sudo route add -net $BLITE_BOSH_DEPLOYMENTS_CIDR     $BLITE_DIRECTOR_IP # Mac OS X"
  echo "   route add           $BLITE_BOSH_DEPLOYMENTS_CIDR     $BLITE_DIRECTOR_IP # Windows"
  echo
  echo "You can automatically set the routes up if the above configuration looks right using:"
  echo "  blite route-add"
  echo
}

print_route_error() {
  echo "Unable to detect route command to use, you'll have to set up routing manually."
  echo "The output of blite config might be helpful. Sorry /shrug"
}

route_add() {
  echo "Adding routes typically requires elevated permissions. You may be prompted for your root password."
  echo "If you'd rather not enter it, run blite config to see the routing commands you can run manually..."
  case $OSTYPE in
    linux-gnu)
      echo "Linux detected"
      if [ $(command -v route) ]; then
         echo "route command available: route"
         echo "Running: sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw ${BLITE_DIRECTOR_IP}"
        sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw  ${BLITE_DIRECTOR_IP} && echo "route added"
      elif [ $(command -v ip) ]; then
        echo "route command available: ip"
        echo "Running: sudo ip route add   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP}"
        sudo ip route add   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP} && echo "route added"
      else
        print_route_error
      fi
    ;;
    darwin*)
      echo "OS X detected"
      echo "Running: sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route added"
    ;;
    cygwin|mysys)
      echo "Windows detected"
      echo "Running: route add ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      route add ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route added"
    ;;
    *)
      echo "Could not detect your OS effectively from \$OSTYPE: $OSTYPE"
      print_route_error
    ;;
  esac
}

route_rm() {
  echo "Removing routes requires elevated permissions. You will be prompted for your root password."
  case $OSTYPE in
    linux-gnu)
      echo "Linux detected"
      if [ $(command -v route) ]; then
         echo "route command available: route"
         echo "Running: sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw ${BLITE_DIRECTOR_IP}"
        sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw ${BLITE_DIRECTOR_IP} && echo "route removed"
      elif [ $(command -v ip) ]; then
        echo "route command available: ip"
        echo "Running: sudo ip route delete   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP}"
        sudo ip route delete   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP} && echo "route removed"
      else
        print_route_error
      fi
    ;;
    darwin*)
      echo "OS X detected"
      echo "Running: sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route removed"
    ;;
    cygwin|mysys)
      echo "Windows detected"
      echo "Running: route delete ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      route delete ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route removed"
    ;;
    *)
      echo "Could not detect your OS effectively from \$OSTYPE: $OSTYPE"
      print_route_error
    ;;
  esac
}

update_bosh_deployment_version () {
  rm -f ${BOSH_DEPLOYMENT_VERSION_FILE}
  echo "Fetching latest version hash for bosh deployment files from github..."
  BOSH_DEPLOYMENT_VERSION_HASH=$( curl https://api.github.com/repos/cloudfoundry/bosh-deployment/commits/master 2>/dev/null | jq -r '.sha')
  echo ${BOSH_DEPLOYMENT_VERSION_HASH} > ${BOSH_DEPLOYMENT_VERSION_FILE}
  DEPLOYMENT_FILES=${BOSH_DEPLOYMENT_FILES}/${BOSH_DEPLOYMENT_VERSION_HASH}
  echo "Hash: $BOSH_DEPLOYMENT_VERSION_HASH"
}

fetch_bosh_deployment_files () {

  if [ -z "${BOSH_DEPLOYMENT_VERSION_HASH}" ]; then
    update_bosh_deployment_version
  fi

  echo "Fetching bosh-deployment manifest and ops-files from github..."
  echo "Writing to: $DEPLOYMENT_FILES"
  mkdir -p ${DEPLOYMENT_FILES}
  echo "Fetching bosh.yml..."
  curl -o ${DEPLOYMENT_FILES}/bosh.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/bosh.yml 2>/dev/null
  echo "  Success"
  echo "Fetching cpi.yml..."
  curl -o ${DEPLOYMENT_FILES}/cpi.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/virtualbox/cpi.yml 2>/dev/null
  echo "  Success"
  echo "Fetching outbound-network.yml..."
  curl -o ${DEPLOYMENT_FILES}/outbound-network.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/virtualbox/outbound-network.yml 2>/dev/null
  echo "  Success"
  echo "Fetching bosh-lite.yml..."
  curl -o ${DEPLOYMENT_FILES}/bosh-lite.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/bosh-lite.yml 2>/dev/null
  echo "  Success"
  echo "Fetching bosh-lite-runc.yml..."
  curl -o ${DEPLOYMENT_FILES}/bosh-lite-runc.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/bosh-lite-runc.yml 2>/dev/null
  echo "  Success"
  echo "Fetching jumpbox-user.yml..."
  curl -o ${DEPLOYMENT_FILES}/jumpbox-user.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/jumpbox-user.yml 2>/dev/null
  echo "  Success"
}

deploy_director () {
  ${BLITE_BOSH_EXECUTABLE} interpolate ${DEPLOYMENT_FILES}/bosh.yml \
    -o ${DEPLOYMENT_FILES}/cpi.yml \
    -o ${DEPLOYMENT_FILES}/outbound-network.yml \
    -o ${DEPLOYMENT_FILES}/bosh-lite.yml \
    -o ${DEPLOYMENT_FILES}/bosh-lite-runc.yml \
    -o ${DEPLOYMENT_FILES}/jumpbox-user.yml \
    --vars-store ${CREDS_FILE} \
    -v director_name="BLite Bosh Director" \
    -v internal_ip=${BLITE_DIRECTOR_IP} \
    -v internal_gw=${BLITE_GATEWAY_IP} \
    -v internal_cidr=${BLITE_DIRECTOR_CIDR}\
    -v outbound_network_name=NatNetwork > ${blite_manifest} || exit 1

  if [ ! -e "$blite_manifest" ]; then
    echo "No manifest found at $blite_manifest..."
    echo "This corrupt state should never have occurred. Good luck."
    exit 1
  fi

  ${BLITE_BOSH_EXECUTABLE} create-env ${blite_manifest} \
    --state ${STATE_FILE}

  ${BLITE_BOSH_EXECUTABLE} alias-env ${BLITE_BOSH_ENVIRONMENT} -e ${BLITE_DIRECTOR_IP} --ca-cert <(${BLITE_BOSH_EXECUTABLE} interpolate ${CREDS_FILE} --path /director_ssl/ca)

  print_env_info
}

destroy_blite_director () {
  if [ ! -e "$blite_manifest" ] || [ ! -e "$STATE_FILE" ]; then
    print_no_director_error
    exit 1
  fi

  ${BLITE_BOSH_EXECUTABLE} delete-env ${blite_manifest} \
    --state ${STATE_FILE}

  rm -f ${blite_manifest} ${STATE_FILE} ${CREDS_FILE}
}

update () {
  update_bosh_deployment_version
  fetch_bosh_deployment_files
}

create () {
  if [ -z "$(ls -A ${DEPLOYMENT_FILES})" ]; then
    fetch_bosh_deployment_files
  fi

  if [ ! -e "$blite_manifest" ]; then
    echo "Deploying Director..."
    deploy_director
  else
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "There's already a bosh-lite director running with this configuration."
    print_blite_configuration
    echo "Try running blite destroy first."
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
fi

}

pause () {
  if [ ! -e ${STATE_FILE} ]; then
    print_no_director_error
    exit 1
  fi

  director_machine_id=$(jq -r '.current_vm_cid' ${STATE_FILES}/${blite_id}-state.json)

  if [ ! -z "$(VBoxManage list vms -l | grep -e Name: -e State | grep -a1 ${director_machine_id} | grep running)" ]; then
    echo "Pausing bosh-lite director: ${director_machine_id}"
    VBoxManage controlvm ${director_machine_id} pause
  elif [ ! -z "$(VBoxManage list vms | grep ${director_machine_id})" ]; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "The bosh-lite director is already paused."
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  else
    print_good_luck_error
  fi
}

resume () {
  if [ ! -e ${STATE_FILE} ]; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "There doesn't seem to be a bosh-lite director with this configuration:"
    print_blite_configuration
    echo "Try running blite create first."
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    exit 1
  fi

  director_machine_id=$(jq -r '.current_vm_cid' ${STATE_FILES}/${blite_id}-state.json)
  director_state=$(VBoxManage list vms -l | grep -e Name -e State | grep -a1 ${director_machine_id})
  echo ${director_state}

  if [ ! -z "$(echo ${director_state} | grep paused)" ]; then
    echo "Resuming bosh-lite director: ${director_machine_id}"
    VBoxManage controlvm ${director_machine_id} resume
  elif [ ! -z "$(echo ${director_state} | grep 'powered off')" ]; then
    echo "Director was powered off, attempting to startup and resume"
    VBoxManage startvm ${director_machine_id} --type headless
    echo "Removing manifest sha from state file to force a redeploy..."
    jq '. | del(.current_manifest_sha)' ${STATE_FILE} > ${STATE_FILE}.tmp && mv ${STATE_FILE}.tmp ${STATE_FILE}
    ${BLITE_BOSH_EXECUTABLE} create-env ${blite_manifest} --state ${STATE_FILE}
    echo "Because your director was powered off and not paused you might need to run bosh cck"
  elif [ ! -z "$(VBoxManage list runningvms | grep ${director_machine_id})" ]; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "The bosh-lite director is already running."
    print_director_ip
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  else
    print_good_luck_error
    echo "director VBox ID: ${director_machine_id}"
  fi

}

purge () {
  echo "Completely removing configuration and state cache from $CONFIG"
  rm -r ${CONFIG}
}

status () {
  echo "Bosh Director Status:"
  director_machine_id=$(jq -r '.current_vm_cid' ${STATE_FILES}/${blite_id}-state.json)
  VBoxManage list vms -l | grep -e Name -e State | grep -A1 ${director_machine_id}
}

case $1 in
    create)
      create
      exit 0
    ;;
    destroy)
      destroy_blite_director
      exit 0
    ;;
    pause)
      pause
      exit 0
    ;;
    resume)
      resume
      exit 0
    ;;
    update)
      update
      exit 0
    ;;
    status)
      status
      exit 0
    ;;
    config)
      print_env_info
      exit 0
    ;;
    env-eval)
      print_director_env_config
      exit 0
    ;;
    route-add)
      route_add
      exit 0
    ;;
    route-rm)
      route_rm
      exit 0
    ;;
    snapshot)
      echo "snapshot command is not yet implemented"
    ;;
    snapshots)
      echo "snapshots command is not yet implemented"
      exit 0
    ;;
    list)
      echo "list command is not yet implemented"
      exit 0
    ;;
    restore)
      echo "restore command is not yet implemented"
      exit 0
    ;;
    purge)
      purge
      exit 0
    ;;
    *)
      echo "blite $VERSION"
      echo "Supported commands are: create, destroy, pause, resume, update, list, snapshot, snapshots, restore, purge, route-add, route-rm, env-eval and config"
      export BOOGALOO=woohoo
    ;;
esac

